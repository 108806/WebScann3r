[
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Insecure_Configuration",
        "description": "patterns.Insecure_Configuration",
        "isExtraImport": true,
        "detail": "patterns.Insecure_Configuration",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.CSRF_Vulnerabilities",
        "description": "patterns.CSRF_Vulnerabilities",
        "isExtraImport": true,
        "detail": "patterns.CSRF_Vulnerabilities",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.SQL_Injection",
        "description": "patterns.SQL_Injection",
        "isExtraImport": true,
        "detail": "patterns.SQL_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.XSS",
        "description": "patterns.XSS",
        "isExtraImport": true,
        "detail": "patterns.XSS",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Command_Injection",
        "description": "patterns.Command_Injection",
        "isExtraImport": true,
        "detail": "patterns.Command_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.File_Inclusion",
        "description": "patterns.File_Inclusion",
        "isExtraImport": true,
        "detail": "patterns.File_Inclusion",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Insecure_Crypto",
        "description": "patterns.Insecure_Crypto",
        "isExtraImport": true,
        "detail": "patterns.Insecure_Crypto",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Hardcoded_Credentials",
        "description": "patterns.Hardcoded_Credentials",
        "isExtraImport": true,
        "detail": "patterns.Hardcoded_Credentials",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Information_Disclosure",
        "description": "patterns.Information_Disclosure",
        "isExtraImport": true,
        "detail": "patterns.Information_Disclosure",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.SSRF_Vulnerabilities",
        "description": "patterns.SSRF_Vulnerabilities",
        "isExtraImport": true,
        "detail": "patterns.SSRF_Vulnerabilities",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.XXE_Vulnerabilities",
        "description": "patterns.XXE_Vulnerabilities",
        "isExtraImport": true,
        "detail": "patterns.XXE_Vulnerabilities",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Open_Redirect",
        "description": "patterns.Open_Redirect",
        "isExtraImport": true,
        "detail": "patterns.Open_Redirect",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.JWT_Issues",
        "description": "patterns.JWT_Issues",
        "isExtraImport": true,
        "detail": "patterns.JWT_Issues",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Deserialization",
        "description": "patterns.Deserialization",
        "isExtraImport": true,
        "detail": "patterns.Deserialization",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.LDAP_Injection",
        "description": "patterns.LDAP_Injection",
        "isExtraImport": true,
        "detail": "patterns.LDAP_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.NoSQL_Injection",
        "description": "patterns.NoSQL_Injection",
        "isExtraImport": true,
        "detail": "patterns.NoSQL_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Prototype_Pollution",
        "description": "patterns.Prototype_Pollution",
        "isExtraImport": true,
        "detail": "patterns.Prototype_Pollution",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Insecure_Randomness",
        "description": "patterns.Insecure_Randomness",
        "isExtraImport": true,
        "detail": "patterns.Insecure_Randomness",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Path_Traversal",
        "description": "patterns.Path_Traversal",
        "isExtraImport": true,
        "detail": "patterns.Path_Traversal",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Unrestricted_File_Upload",
        "description": "patterns.Unrestricted_File_Upload",
        "isExtraImport": true,
        "detail": "patterns.Unrestricted_File_Upload",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Software_Library_Versions",
        "description": "patterns.Software_Library_Versions",
        "isExtraImport": true,
        "detail": "patterns.Software_Library_Versions",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Directory_Listing_Enabled",
        "description": "patterns.Directory_Listing_Enabled",
        "isExtraImport": true,
        "detail": "patterns.Directory_Listing_Enabled",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Weak_JWT_Secret",
        "description": "patterns.Weak_JWT_Secret",
        "isExtraImport": true,
        "detail": "patterns.Weak_JWT_Secret",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Server_Side_Template_Injection",
        "description": "patterns.Server_Side_Template_Injection",
        "isExtraImport": true,
        "detail": "patterns.Server_Side_Template_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Unvalidated_Redirects",
        "description": "patterns.Unvalidated_Redirects",
        "isExtraImport": true,
        "detail": "patterns.Unvalidated_Redirects",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Sensitive_Data_Exposure",
        "description": "patterns.Sensitive_Data_Exposure",
        "isExtraImport": true,
        "detail": "patterns.Sensitive_Data_Exposure",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.CORS_Misconfiguration",
        "description": "patterns.CORS_Misconfiguration",
        "isExtraImport": true,
        "detail": "patterns.CORS_Misconfiguration",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.XML_Injection",
        "description": "patterns.XML_Injection",
        "isExtraImport": true,
        "detail": "patterns.XML_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Insecure_Cookie_Flags",
        "description": "patterns.Insecure_Cookie_Flags",
        "isExtraImport": true,
        "detail": "patterns.Insecure_Cookie_Flags",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Use_of_Dangerous_Functions",
        "description": "patterns.Use_of_Dangerous_Functions",
        "isExtraImport": true,
        "detail": "patterns.Use_of_Dangerous_Functions",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "patterns.Insecure_HTTP_Headers",
        "description": "patterns.Insecure_HTTP_Headers",
        "isExtraImport": true,
        "detail": "patterns.Insecure_HTTP_Headers",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "WebScanner",
        "importPath": "src.scanner",
        "description": "src.scanner",
        "isExtraImport": true,
        "detail": "src.scanner",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Business_Logic_Flaw",
        "description": "src.patterns.Business_Logic_Flaw",
        "peekOfCode": "patterns = [\n    # Business logic flaws are context-specific and often require manual review.\n    # Placeholder: Look for TODOs or FIXMEs that mention logic or security\n    r'TODO.*logic',\n    r'FIXME.*security',\n]",
        "detail": "src.patterns.Business_Logic_Flaw",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.CORS_Misconfiguration",
        "description": "src.patterns.CORS_Misconfiguration",
        "peekOfCode": "patterns = [\n    r'(?i)Access-Control-Allow-Origin:\\s*\\*',\n    r'(?i)Access-Control-Allow-Credentials:\\s*true',\n    r'(?i)Access-Control-Allow-Methods:\\s*GET, POST, PUT, DELETE, OPTIONS',\n    r'(?i)Access-Control-Allow-Headers:\\s*.*',\n    r'(?i)\\bCORS\\b',\n]",
        "detail": "src.patterns.CORS_Misconfiguration",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.CSRF_Vulnerabilities",
        "description": "src.patterns.CSRF_Vulnerabilities",
        "peekOfCode": "patterns = [\n    r'(?i)csrf_token\\s*=\\s*[\\'\"]\\s*[\\'\"]\\s*',\n    r'(?i)anticsrf\\s*=\\s*[\\'\"]\\s*[\\'\"]\\s*',\n    r'(?i)_csrf\\s*=\\s*[\\'\"]\\s*[\\'\"]\\s*',\n    r'(?i)<form[^>]*method=[\\'\"]post[\\'\"][^>]*>(?:(?!csrf).)*<\\/form>',\n    r'(?i)\\.setRequestHeader\\([\\'\"]X-CSRF-Token[\\'\"]\\s*,\\s*[\\'\"][\\'\"]\\)',\n    r'(?i)\\.setRequestHeader\\([\\'\"]X-CSRF-Token[\\'\"]\\s*,\\s*null\\)',\n    # Expanded patterns\n    r'(?i)csrfmiddlewaretoken\\s*=\\s*[\\'\"]?\\s*[\\'\"]?',  # Django\n    r'(?i)xsrf_token\\s*=\\s*[\\'\"]?\\s*[\\'\"]?',  # Angular/Google",
        "detail": "src.patterns.CSRF_Vulnerabilities",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Clickjacking",
        "description": "src.patterns.Clickjacking",
        "peekOfCode": "patterns = [\n    # Look for missing or misconfigured X-Frame-Options headers\n    r'X-Frame-Options\\s*[:=]\\s*(?!DENY|SAMEORIGIN)', # X-Frame-Options not DENY/SAMEORIGIN\n    r'response\\.headers\\s*\\[\\s*[\"\\'X-Frame-Options\\'\\\"]\\s*\\]\\s*=\\s*[\"\\'\\\"]?[^\\'\\\"]*', # Setting X-Frame-Options header\n    # Look for missing or misconfigured Content-Security-Policy frame-ancestors directives\n    r'Content-Security-Policy\\s*[:=]\\s*(?!.*frame-ancestors)', # CSP missing frame-ancestors\n]",
        "detail": "src.patterns.Clickjacking",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Command_Injection",
        "description": "src.patterns.Command_Injection",
        "peekOfCode": "patterns = [\n    r'(?i)(?:exec|shell_exec|system|passthru|popen|proc_open)\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # PHP functions with user input\n    r'(?i)(?:exec|shell_exec|system|passthru|popen|proc_open)\\s*\\(\\s*.*\\+', # PHP functions with concat\n    r'(?i)spawn\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # spawn with user input\n    r'(?i)child_process\\.exec\\s*\\(\\s*.*\\+', # Node.js exec with concat\n    r'(?i)Runtime\\.getRuntime\\(\\)\\.exec\\(.*\\+', # Java exec with concat\n    r'(?i)ProcessBuilder\\(.*\\+', # Java ProcessBuilder with concat\n    r'(?i)os\\.system\\(.*\\+', # Python os.system with concat\n    r'(?i)subprocess\\.(?:call|Popen|run)\\(.*\\+', # Python subprocess with concat\n    r'(?i)os\\.system\\s*\\(\\s*.*\\)', # Python os.system any input",
        "detail": "src.patterns.Command_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Deserialization",
        "description": "src.patterns.Deserialization",
        "peekOfCode": "patterns = [\n    # TLDR: Detects PHP unserialize() with user input (dangerous deserialization)\n    r'(?i)unserialize\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    # TLDR: Detects Java ObjectInputStream with user input\n    r'(?i)ObjectInputStream\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    # TLDR: Detects Python/Ruby YAML load with user input\n    r'(?i)yaml\\.load\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    # TLDR: Detects PHP json_decode() with user input\n    r'(?i)json_decode\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    # TLDR: Detects Ruby Marshal.load() with user input",
        "detail": "src.patterns.Deserialization",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Directory_Listing_Enabled",
        "description": "src.patterns.Directory_Listing_Enabled",
        "peekOfCode": "patterns = [\n    r'(?i)Index of /',\n    r'(?i)Directory listing for /',\n    r'(?i)Options Indexes',\n    r'(?i)autoindex on',\n    r'(?i)mod_autoindex',\n]",
        "detail": "src.patterns.Directory_Listing_Enabled",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.File_Inclusion",
        "description": "src.patterns.File_Inclusion",
        "peekOfCode": "patterns = [\n    r'(?i)(?:include|require|include_once|require_once)\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # PHP file include with user input\n    r'(?i)fopen\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # fopen with user input\n    r'(?i)file_get_contents\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # file_get_contents with user input\n    r'(?i)readfile\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # readfile with user input\n    r'(?i)new\\s+FileReader\\(.*\\$_(?:GET|POST|REQUEST|COOKIE)', # JS FileReader with user input\n    r'(?i)fs\\.readFile\\(.*\\+', # Node.js fs.readFile with concat\n    r'(?i)java\\.io\\.File\\(.*\\+', # Java File with concat\n    r'(?i)open\\(.*\\+.*', # open() with concat\n    r'(?i)include\\s*[\\'\\\"]?\\s*\\$\\w+', # include with variable",
        "detail": "src.patterns.File_Inclusion",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.HTTP_Parameter_Pollution",
        "description": "src.patterns.HTTP_Parameter_Pollution",
        "peekOfCode": "patterns = [\n    # Look for code that parses query parameters without deduplication\n    r'get\\s*\\([^)]+\\)\\s*\\+\\s*get\\s*\\([^)]+\\)',\n    r'request\\.args\\.getlist\\(',\n]",
        "detail": "src.patterns.HTTP_Parameter_Pollution",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Hardcoded_Credentials",
        "description": "src.patterns.Hardcoded_Credentials",
        "peekOfCode": "patterns = [\n    r'(?i)(?:password|passwd|pwd|token|secret|api_key|apikey)\\s*=\\s*[\\'\\\"][^\\'\\\"]+[\\'\\\"]', # Generic hardcoded secrets\n    r'(?i)Authorization:\\s*Basic\\s+[a-zA-Z0-9+/=]+', # Basic Auth header\n    r'(?i)Authorization:\\s*Bearer\\s+[a-zA-Z0-9._~+/=-]+', # Bearer Auth header\n    r'(?i)(?:access_key|access_token|secret_key|api_key|apikey)\\s*[=:]\\s*[\\'\\\"][^\\'\\\"]{8,}[\\'\\\"]', # Hardcoded API/secret keys\n    r'(?i)const\\s+(?:password|passwd|pwd|token|secret|api_key|apikey)\\s*=\\s*[\\'\\\"][^\\'\\\"]+[\\'\\\"]', # JS const secret\n    r'(?i)var\\s+(?:password|passwd|pwd|token|secret|api_key|apikey)\\s*=\\s*[\\'\\\"][^\\'\\\"]+[\\'\\\"]', # JS var secret\n    r'(?i)let\\s+(?:password|passwd|pwd|token|secret|api_key|apikey)\\s*=\\s*[\\'\\\"][^\\'\\\"]+[\\'\\\"]', # JS let secret\n    r'(?i)private\\s+(?:final\\s+)?String\\s+(?:password|passwd|pwd|token|secret|api_key|apikey)\\s*=\\s*[\\'\\\"][^\\'\\\"]+[\\'\\\"]', # Java private String secret\n    r'(?i)env\\.(?:password|passwd|pwd|token|secret|api_key|apikey)\\s*=\\s*[\\'\\\"][^\\'\\\"]+[\\'\\\"]', # env. secret",
        "detail": "src.patterns.Hardcoded_Credentials",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Host_Header_Injection",
        "description": "src.patterns.Host_Header_Injection",
        "peekOfCode": "patterns = [\n    # Look for usage of unvalidated Host headers\n    r'request\\.headers\\s*\\[\\s*[\"\\'Host\\'\\\"]\\s*\\]',\n    r'HTTP_HOST',\n]",
        "detail": "src.patterns.Host_Header_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Information_Disclosure",
        "description": "src.patterns.Information_Disclosure",
        "peekOfCode": "patterns = [\n    r'(?i)console\\.log\\s*\\(', # JS console.log\n    r'(?i)alert\\s*\\(', # JS alert\n    r'(?i)print_r\\s*\\(', # PHP print_r\n    r'(?i)var_dump\\s*\\(', # PHP var_dump\n    r'(?i)phpinfo\\s*\\(', # PHP phpinfo\n    r'(?i)<!--\\s*DEBUG', # HTML debug comment\n    r'(?i)//\\s*DEBUG', # JS debug comment\n    r'(?i)^\\s*echo\\s+.*\\$_(?:GET|POST|REQUEST|COOKIE)', # PHP echo with user input\n    r'(?i)\\.debug\\s*\\(', # .debug() call",
        "detail": "src.patterns.Information_Disclosure",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Insecure_Configuration",
        "description": "src.patterns.Insecure_Configuration",
        "peekOfCode": "patterns = [\n    r'(?i)allow_url_include\\s*=\\s*On', # PHP allow_url_include On\n    r'(?i)allow_url_fopen\\s*=\\s*On', # PHP allow_url_fopen On\n    r'(?i)display_errors\\s*=\\s*On', # PHP display_errors On\n    r'(?i)expose_php\\s*=\\s*On', # PHP expose_php On\n    r'(?i)disable_functions\\s*=\\s*', # PHP disable_functions\n    r'(?i)safe_mode\\s*=\\s*Off', # PHP safe_mode Off\n    r'(?i)X-XSS-Protection:\\s*0', # X-XSS-Protection disabled\n    r'(?i)Access-Control-Allow-Origin:\\s*\\*', # CORS allow all\n    r'(?i)helmet.noCache\\(\\s*false\\s*\\)', # helmet.noCache false",
        "detail": "src.patterns.Insecure_Configuration",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Insecure_Cookie_Flags",
        "description": "src.patterns.Insecure_Cookie_Flags",
        "peekOfCode": "patterns = [\n    r'(?i)Set-Cookie:.*(HttpOnly|Secure)',\n    r'(?i)Set-Cookie:.*SameSite=None',\n    r'(?i)Set-Cookie:.*Domain=',\n    r'(?i)Set-Cookie:.*Path=',\n    r'(?i)Set-Cookie:((?!Secure).)*$',\n    r'(?i)Set-Cookie:((?!HttpOnly).)*$',\n]",
        "detail": "src.patterns.Insecure_Cookie_Flags",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Insecure_Crypto",
        "description": "src.patterns.Insecure_Crypto",
        "peekOfCode": "patterns = [\n    r'(?i)md5\\s*\\(',\n    r'(?i)sha1\\s*\\(',\n    r'(?i)crypt\\s*\\(',\n    r'(?i)CryptoJS\\.MD5',\n    r'(?i)CryptoJS\\.SHA1',\n    r'(?i)createHash\\([\\'\\\"]md5[\\'\\\"]\\)',\n    r'(?i)createHash\\([\\'\\\"]sha1[\\'\\\"]\\)',\n    r'(?i)MessageDigest\\.getInstance\\([\\'\\\"]MD5[\\'\\\"]\\)',\n    r'(?i)MessageDigest\\.getInstance\\([\\'\\\"]SHA-1[\\'\\\"]\\)',",
        "detail": "src.patterns.Insecure_Crypto",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Insecure_HTTP_Headers",
        "description": "src.patterns.Insecure_HTTP_Headers",
        "peekOfCode": "patterns = [\n    r'(?i)X-Frame-Options:\\s*ALLOWALL',\n    r'(?i)X-Content-Type-Options:\\s*none',\n    r'(?i)Strict-Transport-Security:\\s*$',\n    r'(?i)X-XSS-Protection:\\s*0',\n    r'(?i)X-Powered-By:\\s*.*',\n    r'(?i)Server:\\s*.*',\n    r'(?i)Content-Security-Policy:\\s*$',\n]",
        "detail": "src.patterns.Insecure_HTTP_Headers",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Insecure_Randomness",
        "description": "src.patterns.Insecure_Randomness",
        "peekOfCode": "patterns = [\n    r'(?i)Math\\.random\\(',\n    r'(?i)random\\.random\\(',\n    r'(?i)rand\\(',\n    r'(?i)srand\\(',\n    r'(?i)\\brandom\\b',\n    r'(?i)\\bSecureRandom\\b',\n    r'(?i)\\bgetrand\\b',\n    r'(?i)\\bdrand48\\b',\n    r'(?i)\\brandom_device\\b',",
        "detail": "src.patterns.Insecure_Randomness",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Insufficient_Logging_Monitoring",
        "description": "src.patterns.Insufficient_Logging_Monitoring",
        "peekOfCode": "patterns = [\n    # Look for absence of logging for critical actions (placeholder)\n    # This is hard to pattern-match, so we use a placeholder\n    r'pass\\s*#\\s*no\\s*logging',\n    r'TODO.*log',\n]",
        "detail": "src.patterns.Insufficient_Logging_Monitoring",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.JWT_Issues",
        "description": "src.patterns.JWT_Issues",
        "peekOfCode": "patterns = [\n    r'(?i)JWT\\.sign\\(\\s*.*,\\s*[\\'\"]none[\\'\"]\\s*',\n    r'(?i)jwtOptions\\s*=\\s*{\\s*(?:.*,\\s*)?[\\'\"]{0,1}algorithm[\\'\"]{0,1}\\s*:\\s*[\\'\"]{1}none[\\'\"]{1}',\n    r'(?i)\\.verifySignature\\(\\s*false\\s*\\)',\n    r'(?i)\\.verify\\(\\s*.*,\\s*.*,\\s*{\\s*(?:.*,\\s*)?[\\'\"]{0,1}algorithms[\\'\"]{0,1}\\s*:\\s*\\[[^\\]]*[\\'\"]none[\\'\"]\\s*[^\\]]*\\]',\n    # Expanded patterns for more JWT detection\n    r'(?i)jwt\\.decode\\(\\s*.*\\)',\n    r'(?i)jwt\\.verify\\(\\s*.*\\)',\n    r'(?i)jwt\\.sign\\(\\s*.*\\)',\n    r'(?i)jwt\\.encode\\(\\s*.*\\)',",
        "detail": "src.patterns.JWT_Issues",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.LDAP_Injection",
        "description": "src.patterns.LDAP_Injection",
        "peekOfCode": "patterns = [\n    # TLDR: Detects ldapsearch command with special LDAP filter characters and variable\n    r'(?i)ldapsearch.*[+&|!].*\\$',\n    # TLDR: Detects LDAP filter with variable assignment\n    r'(?i)(&(.*=\\$.*))',\n    # TLDR: Detects LDAP filter with wildcard assignment\n    r'(?i)(&(.*=\\*.*))',\n    # TLDR: Detects filter parameter with parentheses (potential injection)\n    r'(?i)filter=.*\\(|\\)',\n    # TLDR: Detects objectClass filter with wildcard",
        "detail": "src.patterns.LDAP_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Log_Injection",
        "description": "src.patterns.Log_Injection",
        "peekOfCode": "patterns = [\n    # Look for direct logging of user input\n    r'logger\\.info\\s*\\(.*request',\n    r'log\\s*\\(.*request',\n]",
        "detail": "src.patterns.Log_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Misconfigured_Caching",
        "description": "src.patterns.Misconfigured_Caching",
        "peekOfCode": "patterns = [\n    # Look for missing or insecure Cache-Control headers\n    r'Cache-Control\\s*[:=]\\s*(public|no-cache|no-store|must-revalidate)?', # Cache-Control header\n    r'response\\.headers\\s*\\[.*Cache-Control.*\\]\\s*=\\s*', # Setting Cache-Control header\n    r'Pragma:\\s*no-cache', # Pragma no-cache header\n    r'Expires:\\s*0', # Expires 0 header\n]",
        "detail": "src.patterns.Misconfigured_Caching",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.NoSQL_Injection",
        "description": "src.patterns.NoSQL_Injection",
        "peekOfCode": "patterns = [\n    # TLDR: Detects MongoDB find() with $-prefixed operator (potential injection)\n    r'(?i)db\\..*\\.find\\(.*\\$.*\\)',\n    # TLDR: Detects $where operator in NoSQL queries\n    r'(?i)\\$where\\s*:\\s*[\"\\']?.*',\n    # TLDR: Detects $ne (not equal) operator in NoSQL queries\n    r'(?i)\\$ne\\s*:\\s*[\"\\']?.*',\n    # TLDR: Detects $gt (greater than) operator in NoSQL queries\n    r'(?i)\\$gt\\s*:\\s*[\"\\']?.*',\n    # TLDR: Detects $lt (less than) operator in NoSQL queries",
        "detail": "src.patterns.NoSQL_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Open_Redirect",
        "description": "src.patterns.Open_Redirect",
        "peekOfCode": "patterns = [\n    r'(?i)(?:window\\.location|location\\.href|location\\.replace|location\\.assign|location|(?:<meta[^>]*?refresh[^>]*?content=[\"\\'][^\"\\']*?url=)|(?:<meta[^>]*?http-equiv=[\"\\']?refresh[^>]*?content=[\"\\'][^\"\\']*?url=))\\s*=\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)response\\.redirect\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)res\\.redirect\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)header\\(\\s*[\\'\"]Location:\\s*[\\'\"]\\.\\*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)sendRedirect\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    # Expanded patterns for more Open Redirect detection\n    r'(?i)window\\.location\\s*=\\s*.*',\n    r'(?i)location\\.replace\\s*\\(\\s*.*\\)',\n    r'(?i)location\\.assign\\s*\\(\\s*.*\\)',",
        "detail": "src.patterns.Open_Redirect",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Path_Traversal",
        "description": "src.patterns.Path_Traversal",
        "peekOfCode": "patterns = [\n    # Basic ../ and ..\\\\ patterns\n    r'\\.\\./',\n    r'\\.\\..\\\\\\\\',\n    r'\\.\\./\\.\\./',\n    r'\\.\\..\\\\\\\\.\\..\\\\\\\\',\n    r'\\.\\./\\.\\./',\n    r'\\.\\..\\\\\\\\.\\..\\\\\\\\',\n    r'\\.\\./',\n    r'\\.\\..\\\\',",
        "detail": "src.patterns.Path_Traversal",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Prototype_Pollution",
        "description": "src.patterns.Prototype_Pollution",
        "peekOfCode": "patterns = [\n    # Direct property names (classic)\n    r'(?i)[\"\\']__proto__[\"\\']',\n    r'(?i)[\"\\']constructor[\"\\']',\n    r'(?i)[\"\\']prototype[\"\\']',\n    r'(?i)[\"\\']prototype_chain[\"\\']',\n    r'(?i)[\"\\']__defineGetter__[\"\\']',\n    r'(?i)[\"\\']__defineSetter__[\"\\']',\n    r'(?i)[\"\\']__lookupGetter__[\"\\']',\n    r'(?i)[\"\\']__lookupSetter__[\"\\']',",
        "detail": "src.patterns.Prototype_Pollution",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Race_Condition",
        "description": "src.patterns.Race_Condition",
        "peekOfCode": "patterns = [\n    # Placeholder: Look for common race condition indicators (e.g., time-of-check to time-of-use bugs)\n    r'os\\.access\\s*\\(.*\\)\\s*;?\\s*open\\s*\\(',\n    r'flock\\s*\\(',\n    # Add more specific patterns as needed\n]",
        "detail": "src.patterns.Race_Condition",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Reflected_File_Download",
        "description": "src.patterns.Reflected_File_Download",
        "peekOfCode": "patterns = [\n    # Look for user input reflected in file download responses\n    r'Content-Disposition.*filename.*\\+.*request',\n    r'response\\.headers\\s*\\[.*filename.*\\]\\s*=\\s*.*request',\n]",
        "detail": "src.patterns.Reflected_File_Download",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.SQL_Injection",
        "description": "src.patterns.SQL_Injection",
        "peekOfCode": "patterns = [\n    # Classic SQLi in PHP, Python, Java, Node, Ruby, Go, etc.\n    r'(?i)(?:execute|exec)\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)SELECT\\s+.*\\s+FROM\\s+.*\\s+WHERE\\s+.*=\\s*[\\'\\\"]+.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)INSERT\\s+INTO\\s+.*\\s+VALUES\\s*\\(.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)UPDATE\\s+.*\\s+SET\\s+.*=.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)DELETE\\s+FROM\\s+.*\\s+WHERE\\s+.*=.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)(?:mysql|mysqli|pdo)_query\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)(?:query|prepare)\\(\\s*[\"\\'](?:SELECT|INSERT|UPDATE|DELETE).*$',\n    r'(?i)\\.executeQuery\\(\\s*[\"\\'](?:SELECT|INSERT|UPDATE|DELETE).*[+]',",
        "detail": "src.patterns.SQL_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.SSRF_Vulnerabilities",
        "description": "src.patterns.SSRF_Vulnerabilities",
        "peekOfCode": "patterns = [\n    r'(?i)(?:axios|fetch|http|request|got|superagent|curl_exec)\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',  # HTTP client with user input\n    r'(?i)new\\s+URL\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',  # JS URL() with user input\n    r'(?i)\\.get\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',  # .get() with user input\n    r'(?i)\\.post\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',  # .post() with user input\n    r'(?i)\\.send\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',  # .send() with user input\n    r'(?i)\\.open\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)',  # .open() with user input\n    # Expanded patterns for more SSRF detection\n    r'(?i)urllib\\.request\\.urlopen\\s*\\(\\s*.*\\)',  # Python urllib urlopen\n    r'(?i)requests\\.(get|post|put|delete|head|options|patch)\\s*\\(\\s*.*\\)',  # Python requests",
        "detail": "src.patterns.SSRF_Vulnerabilities",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Sensitive_Data_Exposure",
        "description": "src.patterns.Sensitive_Data_Exposure",
        "peekOfCode": "patterns = [\n    # TLDR: Detects PEM private key blocks\n    r'(?i)BEGIN PRIVATE KEY',\n    # TLDR: Detects PEM RSA private key blocks\n    r'(?i)BEGIN RSA PRIVATE KEY',\n    # TLDR: Detects PEM DSA private key blocks\n    r'(?i)BEGIN DSA PRIVATE KEY',\n    # TLDR: Detects PEM EC private key blocks\n    r'(?i)BEGIN EC PRIVATE KEY',\n    # TLDR: Detects OpenSSH private key blocks",
        "detail": "src.patterns.Sensitive_Data_Exposure",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Server_Side_Template_Injection",
        "description": "src.patterns.Server_Side_Template_Injection",
        "peekOfCode": "patterns = [\n    r'(?i)\\{\\{.*\\}\\}',\n    r'(?i)\\{%.*%\\}',\n    r'(?i)\\$\\{.*\\}',\n    r'(?i)<%.*%>',\n    r'(?i)\\bjinja2\\b',\n    r'(?i)\\btwig\\b',\n    r'(?i)\\berb\\b',\n    r'(?i)\\btemplate\\b',\n]",
        "detail": "src.patterns.Server_Side_Template_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Session_Fixation",
        "description": "src.patterns.Session_Fixation",
        "peekOfCode": "patterns = [\n    # Look for session id settable by user\n    r'session_id\\s*=\\s*request', # session_id from user input\n    r'session\\.set\\s*\\(', # session.set() call\n    r'Set-Cookie:\\s*PHPSESSID=', # Set-Cookie PHPSESSID\n]",
        "detail": "src.patterns.Session_Fixation",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Software_Library_Versions",
        "description": "src.patterns.Software_Library_Versions",
        "peekOfCode": "patterns = [\n    # Existing patterns\n    r'(?i)([a-zA-Z0-9_\\-]+)[-_=]v?(\\d+\\.\\d+(?:\\.\\d+)?)',\n    r'(?i)version\\s*[:=]\\s*[\\'\\\"]?(\\d+\\.\\d+(?:\\.\\d+)?)[\\'\\\"]?',\n    r'(?i)\\bpackage.json\\b',\n    r'(?i)\\brequirements.txt\\b',\n    r'(?i)\\bsetup.py\\b',\n    r'(?i)jquery[\\.-](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.js',\n    r'(?i)bootstrap[\\.-](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.(?:js|css)',\n    r'(?i)angular[\\.-](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.js',",
        "detail": "src.patterns.Software_Library_Versions",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Unrestricted_File_Upload",
        "description": "src.patterns.Unrestricted_File_Upload",
        "peekOfCode": "patterns = [\n    # Common multipart/form-data and file upload indicators\n    r'(?i)multipart/form-data',\n    r'(?i)Content-Disposition: form-data; name=[\\'\\\"]?file[\\'\\\"]?',\n    r'(?i)upload\\s*\\(',\n    r'(?i)file_upload',\n    r'(?i)\\bmove_uploaded_file\\b',\n    r'(?i)\\bopen\\s*\\(.*file',\n    r'(?i)\\bwrite\\s*\\(.*file',\n    r'(?i)saveAs\\s*\\(',",
        "detail": "src.patterns.Unrestricted_File_Upload",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Unvalidated_Redirects",
        "description": "src.patterns.Unvalidated_Redirects",
        "peekOfCode": "patterns = [\n    r'(?i)window\\.location\\s*=\\s*.*',\n    r'(?i)header\\(\\s*[\\'\\\"]Location:.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)\\bredirect\\b.*\\$_(?:GET|POST|REQUEST|COOKIE)',\n    r'(?i)\\bResponse\\.Redirect\\(',\n    r'(?i)\\bHttpServletResponse\\.sendRedirect\\(',\n]",
        "detail": "src.patterns.Unvalidated_Redirects",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Use_of_Dangerous_Functions",
        "description": "src.patterns.Use_of_Dangerous_Functions",
        "peekOfCode": "patterns = [\n    # Python\n    r'(?i)eval\\(',\n    r'(?i)exec\\(',\n    r'(?i)execfile\\(',\n    r'(?i)input\\(',\n    r'(?i)os\\.system\\(',\n    r'(?i)os\\.popen\\(',\n    r'(?i)os\\.popen2\\(',\n    r'(?i)os\\.popen3\\(',",
        "detail": "src.patterns.Use_of_Dangerous_Functions",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.Weak_JWT_Secret",
        "description": "src.patterns.Weak_JWT_Secret",
        "peekOfCode": "patterns = [\n    r'(?i)jwt\\.sign\\(.*[\\'\\\"]{1,8}[\\'\\\"]',\n    r'(?i)jwt\\.encode\\(.*[\\'\\\"]{1,8}[\\'\\\"]',\n    r'(?i)secret\\s*[:=]\\s*[\\'\\\"]{1,8}[\\'\\\"]',\n    r'(?i)jwt_secret\\s*[:=]\\s*[\\'\\\"]{1,8}[\\'\\\"]',\n    r'(?i)jwt.*HS256',\n]",
        "detail": "src.patterns.Weak_JWT_Secret",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.XML_Injection",
        "description": "src.patterns.XML_Injection",
        "peekOfCode": "patterns = [\n    r'(?i)<\\?xml.*\\?>',\n    r'(?i)<!DOCTYPE.*>',\n    r'(?i)\\bxml_parse\\b',\n    r'(?i)\\bxml_load\\b',\n    r'(?i)\\bxmlreader\\b',\n    r'(?i)\\bxml2js\\b',\n]",
        "detail": "src.patterns.XML_Injection",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.XSS",
        "description": "src.patterns.XSS",
        "peekOfCode": "patterns = [\n    r'(?i)document\\.write\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # JS document.write with user input\n    r'(?i)\\.innerHTML\\s*=\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # JS innerHTML with user input\n    r'(?i)\\.outerHTML\\s*=\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # JS outerHTML with user input\n    r'(?i)eval\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # JS eval with user input\n    r'(?i)setTimeout\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # JS setTimeout with user input\n    r'(?i)setInterval\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # JS setInterval with user input\n    r'(?i)new\\s+Function\\s*\\(\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # JS Function() with user input\n    r'(?i)\\.innerText\\s*=\\s*.*\\$_(?:GET|POST|REQUEST|COOKIE)', # JS innerText with user input\n    r'(?i)document\\.body\\.appendChild\\(.*\\$_(?:GET|POST|REQUEST|COOKIE)', # appendChild with user input",
        "detail": "src.patterns.XSS",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "src.patterns.XXE_Vulnerabilities",
        "description": "src.patterns.XXE_Vulnerabilities",
        "peekOfCode": "patterns = [\n    r'(?i)\\.setFeature\\(\"http://apache.org/xml/features/disallow-doctype-decl\",\\s*false\\)',\n    r'(?i)\\.setFeature\\(\"http://xml.org/sax/features/external-general-entities\",\\s*true\\)',\n    r'(?i)\\.setFeature\\(\"http://xml.org/sax/features/external-parameter-entities\",\\s*true\\)',\n    r'(?i)DocumentBuilderFactory\\s*.*\\.setExpandEntityReferences\\(\\s*true\\s*\\)',\n    r'(?i)\\.setFeature\\(XMLConstants\\.FEATURE_SECURE_PROCESSING,\\s*false\\)',\n    r'(?i)libxml_disable_entity_loader\\(\\s*false\\s*\\)',\n    # Expanded patterns for more XXE detection\n    r'(?i)<!DOCTYPE\\s+[^>]+\\[.*<!ENTITY',\n    r'(?i)xml\\.parse\\s*\\(\\s*.*\\)',  # Python",
        "detail": "src.patterns.XXE_Vulnerabilities",
        "documentation": {}
    },
    {
        "label": "SecurityAnalyzer",
        "kind": 6,
        "importPath": "src.analyzer",
        "description": "src.analyzer",
        "peekOfCode": "class SecurityAnalyzer:\n    def __init__(self):\n        \"\"\"\n        Initialize the security analyzer\n        \"\"\"\n        self.security_patterns = {\n            'SQL Injection': sql_injection_patterns,\n            'XSS': xss_patterns,\n            'Command Injection': command_injection_patterns,\n            'File Inclusion': file_inclusion_patterns,",
        "detail": "src.analyzer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.analyzer",
        "description": "src.analyzer",
        "peekOfCode": "logger = logging.getLogger('WebScann3r.Analyzer')\nclass SecurityAnalyzer:\n    def __init__(self):\n        \"\"\"\n        Initialize the security analyzer\n        \"\"\"\n        self.security_patterns = {\n            'SQL Injection': sql_injection_patterns,\n            'XSS': xss_patterns,\n            'Command Injection': command_injection_patterns,",
        "detail": "src.analyzer",
        "documentation": {}
    },
    {
        "label": "EndpointAnalyzer",
        "kind": 6,
        "importPath": "src.endpoint_analyzer",
        "description": "src.endpoint_analyzer",
        "peekOfCode": "class EndpointAnalyzer:\n    def __init__(self):\n        \"\"\"\n        Initialize the endpoint analyzer\n        \"\"\"\n        # Common API patterns\n        self.api_patterns = [\n            r'/api/v\\d+/',\n            r'/v\\d+/api/',\n            r'/rest/',",
        "detail": "src.endpoint_analyzer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.endpoint_analyzer",
        "description": "src.endpoint_analyzer",
        "peekOfCode": "logger = logging.getLogger('WebScann3r.EndpointAnalyzer')\nclass EndpointAnalyzer:\n    def __init__(self):\n        \"\"\"\n        Initialize the endpoint analyzer\n        \"\"\"\n        # Common API patterns\n        self.api_patterns = [\n            r'/api/v\\d+/',\n            r'/v\\d+/api/',",
        "detail": "src.endpoint_analyzer",
        "documentation": {}
    },
    {
        "label": "HTMLReporter",
        "kind": 6,
        "importPath": "src.html_reporter",
        "description": "src.html_reporter",
        "peekOfCode": "class HTMLReporter:\n    def __init__(self, target_url, report_dir='reports', download_dir='downloads'):\n        \"\"\"\n        Initialize the HTML reporter\n        Args:\n            target_url (str): Target URL\n            report_dir (str): Directory to save reports\n            download_dir (str): Directory where files were downloaded\n        \"\"\"\n        self.target_url = target_url",
        "detail": "src.html_reporter",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.html_reporter",
        "description": "src.html_reporter",
        "peekOfCode": "logger = logging.getLogger('WebScann3r.HTMLReporter')\nclass HTMLReporter:\n    def __init__(self, target_url, report_dir='reports', download_dir='downloads'):\n        \"\"\"\n        Initialize the HTML reporter\n        Args:\n            target_url (str): Target URL\n            report_dir (str): Directory to save reports\n            download_dir (str): Directory where files were downloaded\n        \"\"\"",
        "detail": "src.html_reporter",
        "documentation": {}
    },
    {
        "label": "Reporter",
        "kind": 6,
        "importPath": "src.reporter",
        "description": "src.reporter",
        "peekOfCode": "class Reporter:\n    \"\"\"\n    Reporter class for generating various types of reports from scan data\n    This class handles the creation of security reports, function usage reports,\n    file structure reports, and a comprehensive final report that combines all findings.\n    ---\n    Data Structure Notes:\n    security_findings: dict\n        Structure:\n            {",
        "detail": "src.reporter",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.reporter",
        "description": "src.reporter",
        "peekOfCode": "logger = logging.getLogger('WebScann3r.Reporter')\nclass Reporter:\n    \"\"\"\n    Reporter class for generating various types of reports from scan data\n    This class handles the creation of security reports, function usage reports,\n    file structure reports, and a comprehensive final report that combines all findings.\n    ---\n    Data Structure Notes:\n    security_findings: dict\n        Structure:",
        "detail": "src.reporter",
        "documentation": {}
    },
    {
        "label": "ColorFormatter",
        "kind": 6,
        "importPath": "src.scanner",
        "description": "src.scanner",
        "peekOfCode": "class ColorFormatter(logging.Formatter):\n    FORMATS = {\n        logging.DEBUG: Fore.WHITE + \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" + Style.RESET_ALL,\n        logging.INFO: Fore.GREEN + \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" + Style.RESET_ALL,\n        logging.WARNING: Fore.YELLOW + \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" + Style.RESET_ALL,\n        logging.ERROR: Fore.RED + \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" + Style.RESET_ALL,\n        logging.CRITICAL: Fore.RED + Style.BRIGHT + \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" + Style.RESET_ALL\n    }\n    def format(self, record):\n        log_fmt = self.FORMATS.get(record.levelno)",
        "detail": "src.scanner",
        "documentation": {}
    },
    {
        "label": "WebScanner",
        "kind": 6,
        "importPath": "src.scanner",
        "description": "src.scanner",
        "peekOfCode": "class WebScanner:\n    def __init__(self, target_url, download_dir='targets', report_dir='targets', same_domain_only=True, \n                 download_media=False, download_archives=False, download_text=False, threads=10, timeout=30,\n                 max_depth=None):\n        \"\"\"\n        Initialize the web scanner\n        Args:\n            target_url (str): Target URL to scan\n            download_dir (str): Base directory to save downloaded files\n            report_dir (str): Base directory to save reports",
        "detail": "src.scanner",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "src.scanner",
        "description": "src.scanner",
        "peekOfCode": "handler = logging.StreamHandler()\nhandler.setFormatter(ColorFormatter())\nfile_handler = logging.FileHandler(\"webscann3r.log\")\nfile_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\nlogging.basicConfig(\n    level=logging.INFO,\n    handlers=[file_handler, handler]\n)\nlogger = logging.getLogger('WebScann3r')\nclass WebScanner:",
        "detail": "src.scanner",
        "documentation": {}
    },
    {
        "label": "file_handler",
        "kind": 5,
        "importPath": "src.scanner",
        "description": "src.scanner",
        "peekOfCode": "file_handler = logging.FileHandler(\"webscann3r.log\")\nfile_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\nlogging.basicConfig(\n    level=logging.INFO,\n    handlers=[file_handler, handler]\n)\nlogger = logging.getLogger('WebScann3r')\nclass WebScanner:\n    def __init__(self, target_url, download_dir='targets', report_dir='targets', same_domain_only=True, \n                 download_media=False, download_archives=False, download_text=False, threads=10, timeout=30,",
        "detail": "src.scanner",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.scanner",
        "description": "src.scanner",
        "peekOfCode": "logger = logging.getLogger('WebScann3r')\nclass WebScanner:\n    def __init__(self, target_url, download_dir='targets', report_dir='targets', same_domain_only=True, \n                 download_media=False, download_archives=False, download_text=False, threads=10, timeout=30,\n                 max_depth=None):\n        \"\"\"\n        Initialize the web scanner\n        Args:\n            target_url (str): Target URL to scan\n            download_dir (str): Base directory to save downloaded files",
        "detail": "src.scanner",
        "documentation": {}
    },
    {
        "label": "normalize_url",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def normalize_url(url):\n    \"\"\"\n    Normalize a URL by removing fragments and ensuring it has a scheme\n    Args:\n        url (str): URL to normalize\n    Returns:\n        str: Normalized URL\n    \"\"\"\n    if not url:\n        return None",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "is_same_domain",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def is_same_domain(url1, url2):\n    \"\"\"\n    Check if two URLs have the same domain\n    Args:\n        url1 (str): First URL\n        url2 (str): Second URL\n    Returns:\n        bool: Whether the URLs have the same domain\n    \"\"\"\n    domain1 = urlparse(url1).netloc",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "get_file_extension",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def get_file_extension(url):\n    \"\"\"\n    Get the file extension from a URL\n    Args:\n        url (str): URL to get extension from\n    Returns:\n        str: File extension (including the dot) or empty string\n    \"\"\"\n    path = urlparse(url).path\n    return os.path.splitext(path)[1].lower()",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "get_content_type",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def get_content_type(headers):\n    \"\"\"\n    Get content type from response headers\n    Args:\n        headers (dict): Response headers\n    Returns:\n        str: Content type or None\n    \"\"\"\n    return headers.get('Content-Type', '').lower().split(';')[0]\ndef is_binary_content(content_type):",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "is_binary_content",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def is_binary_content(content_type):\n    \"\"\"\n    Check if content type is binary\n    Args:\n        content_type (str): Content type\n    Returns:\n        bool: Whether the content is binary\n    \"\"\"\n    binary_types = [\n        'application/octet-stream',",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "find_security_issue",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def find_security_issue(content, pattern):\n    \"\"\"\n    Find security issues in content based on a pattern\n    Args:\n        content (str): Content to search\n        pattern (str): Regex pattern\n    Returns:\n        list: List of matches with line numbers\n    \"\"\"\n    matches = []",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "truncate_string",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def truncate_string(string, max_length=100):\n    \"\"\"\n    Truncate a string to a specified length\n    Args:\n        string (str): String to truncate\n        max_length (int): Maximum length\n    Returns:\n        str: Truncated string\n    \"\"\"\n    if len(string) <= max_length:",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "logger = logging.getLogger('WebScann3r.Utils')\ndef normalize_url(url):\n    \"\"\"\n    Normalize a URL by removing fragments and ensuring it has a scheme\n    Args:\n        url (str): URL to normalize\n    Returns:\n        str: Normalized URL\n    \"\"\"\n    if not url:",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "webscann3r",
        "description": "webscann3r",
        "peekOfCode": "def main():\n    banner = \"\"\"\n __        __   _     ____                       _____      \n \\ \\      / /__| |__ / ___|  ___ __ _ _ __  _ __|___ / _ __ \n  \\ \\ /\\ / / _ \\ '_ \\\\___ \\ / __/ _` | '_ \\| '_ \\ |_ \\| '__|\n   \\ V  V /  __/ |_) |___) | (_| (_| | | | | | | |__) | |   \n    \\_/\\_/ \\___|_.__/|____/ \\___\\__,_|_| |_|_| |_|____/|_|   \n    A Web Scanning and Mapping Tool for Red Teams\n    --------------------------------------------\n    \"\"\"",
        "detail": "webscann3r",
        "documentation": {}
    }
]